시계열 데이터 예측을 위한 단계별 가이드:

1. 필요한 라이브러리 임포트:
```python
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error
import matplotlib.pyplot as plt
```

2. 데이터 로드 및 전처리:
```python
# JSON 파일에서 데이터 로드
df = pd.read_json('data.json', lines=True)

# 날짜를 datetime 형식으로 변환
df['day'] = pd.to_datetime(df['day'])

# 날짜를 기준으로 정렬
df = df.sort_values('day')

# 특성 생성
df['dayofweek'] = df['day'].dt.dayofweek
df['month'] = df['day'].dt.month
df['year'] = df['day'].dt.year
```

3. 특성 및 타겟 변수 준비:
```python
X = df[['dayofweek', 'month', 'year']]
y = df['sumPowerReading']

# 데이터 분할
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# 특성 스케일링
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)
```

4. 랜덤 포레스트 모델 훈련:
```python
rf_model = RandomForestRegressor(n_estimators=100, random_state=42)
rf_model.fit(X_train_scaled, y_train)
```

5. 예측 및 평가:
```python
y_pred = rf_model.predict(X_test_scaled)
mse = mean_squared_error(y_test, y_pred)
print(f'평균 제곱 오차: {mse}')
```

6. 미래 데이터 예측:
```python
# 미래 날짜 생성
future_dates = pd.date_range(start=df['day'].max() + pd.Timedelta(days=1), periods=30)
future_df = pd.DataFrame({'day': future_dates})

# 특성 생성
future_df['dayofweek'] = future_df['day'].dt.dayofweek
future_df['month'] = future_df['day'].dt.month
future_df['year'] = future_df['day'].dt.year

# 스케일링 및 예측
future_X = scaler.transform(future_df[['dayofweek', 'month', 'year']])
future_pred = rf_model.predict(future_X)

# 결과 시각화
plt.figure(figsize=(12, 6))
plt.plot(df['day'], df['sumPowerReading'], label='실제 데이터')
plt.plot(future_dates, future_pred, label='예측', color='red')
plt.legend()
plt.title('전력 소비량 예측')
plt.xlabel('날짜')
plt.ylabel('전력 소비량')
plt.show()
```

7. 예측 결과 해석:
- 예측된 값들은 미래의 전력 소비량을 나타냅니다.
- 평균 제곱 오차(MSE)를 통해 모델의 정확도를 평가할 수 있습니다.
- 그래프를 통해 실제 데이터와 예측 데이터의 추세를 비교할 수 있습니다.

8. 주요 영향 요인 분석:
```python
feature_importance = pd.DataFrame({
    'feature': X.columns,
    'importance': rf_model.feature_importances_
}).sort_values('importance', ascending=False)

print(feature_importance)

plt.figure(figsize=(10, 6))
plt.bar(feature_importance['feature'], feature_importance['importance'])
plt.title('특성 중요도')
plt.xlabel('특성')
plt.ylabel('중요도')
plt.show()
```

이 단계를 통해 특성의 중요도를 확인하고, 어떤 요인이 전력 소비량 예측에 가장 큰 영향을 미치는지 파악할 수 있습니다. 예를 들어, 월(month)이 가장 중요한 특성으로 나타난다면, 계절적 요인이 전력 소비량에 큰 영향을 미친다고 해석할 수 있습니다.
